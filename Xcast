#!/usr/bin/env ruby
require 'pathname'
require 'highline/system_extensions'
require 'optparse'

xinit_file        = (Pathname(__FILE__).dirname + "xinit").expand_path
use_xephyr        = false
root_display      = ENV['DISPLAY']
record_display    = root_display
xephyr_display    = ":5.0"
xephyr_env        = {}
xephyr_bin        = (Pathname(__FILE__).dirname + "xephyr-bin").expand_path
xephyr_path       = "#{xephyr_bin}:#{ENV['PATH']}"
full              = false
default_codecs    = true
basename          = "screencast-" + Time.now.strftime("%Y%m%d-%H%M")
dirname           = Pathname("#{ENV['HOME']}/screencasts")
filename          = dirname + Pathname("#{basename}.mp4")
thread_count      = 6
fps               = 15
width             = 1280
height            = 720
x                 = 500
y                 = 300
audio_input       = "pulse"
format            = "x11grab"
video_codec       = "mpeg4"
video_preset      = "lossless_ultrafast"
audio_codec       = "pcm_s16le"
pick              = false
delay_seconds     = 0
show              = false

OptionParser.new do |opts|
  opts.on("-f", "--[no-]full") do |value|
    full = value
  end

  opts.on("-p", "--pick") do |value|
    pick = value
  end

  opts.on("-x=N", Integer, "Horizontal offset") do |value|
    x = value
  end

  opts.on("-y=N", Integer, "Vertical offset") do |value|
    y = value
  end

  opts.on("-w", "--width", Integer, "Recording area width") do |value|
    width = value
  end

  opts.on("-h", "--height", Integer, "Recording area height") do
    |value|
    height = value
  end

  opts.on("--xephyr", "Use X server in a window") do |value|
    use_xephyr = value
  end

  opts.on("--display=DISPLAY", String) do |value|
    xephyr_display = value
  end

  opts.on("--delay=N", "-D", "Delay N seconds", Integer) do |value|
    delay_seconds = value
  end

  opts.on("--play", "-P", "Show video after recording") do |value|
    show = value
  end

  opts.on_tail("-h", "--help") do
    puts opts
    exit
  end

end.parse!

if use_xephyr
  x = y = 0
  %w[DISPLAY HOME USER EDITOR VISUAL SHELL].each do |key|
    xephyr_env[key] = ENV[key]
  end
  xephyr_env["PATH"] = xephyr_path
  record_display = xephyr_display
  xinit_command = %W[xinit #{xinit_file} -- /usr/bin/Xephyr #{record_display} -dpi 96
    -host-cursor -screen #{width}x#{height}
  ]
  xinit_options = {
    :unsetenv_others => true
  }
  puts xinit_command.join(" ")
  xephyr_pid = Process.spawn(xephyr_env, *xinit_command, xinit_options)
end


offset            = full ? "" : "+#{x},#{y}"
video_input       = "#{record_display}#{offset}"
geometry          = "#{width}x#{height}"
geometry_options  = full ? %W[-s 1920x1080] : %W[-s #{geometry}]
recording_options = %W[-f #{format}] + geometry_options +
  %W[-i #{video_input} -r #{fps}]
acodec_options    = default_codecs ? [] : %W[-acodec #{audio_codec}]
vcodec_options    = default_codecs ? [] :
  %W[-vcodec #{video_codec}] #  -vpre #{video_preset}
audio_options     = acodec_options + %W[-f alsa -i #{audio_input}]
video_options     = vcodec_options
misc_options      = %W[-sameq -threads #{thread_count}]
output_options    = [filename.to_s]
ffmpeg_flags      = audio_options +
  recording_options +
  video_options +
  misc_options +
  output_options
xephyr_flags      = %W[#{display} -ac -screen #{width}x#{height}]
wmctrl_flags      = %W[-r :ACTIVE: -e 0,#{x},#{y},#{width},#{height-12}]

unless full
  if pick
    # Lots of screen recorders let you pick a window to record. That's
    # not very useful to me, because I want to do recordings at a known,
    # consistent geometry (e.g. 1280x720). So instead, you pick a window
    # and the script resizes it and repositions it for recording.
    puts "Pick window:"
    system "wmctrl", *%W[-a :SELECT:]
    system "wmctrl", *wmctrl_flags
  end
end

puts "Press <enter> to begin recording..."
$stdin.gets

delay_seconds.downto(1) do |seconds_left|
  puts "Recording in #{seconds_left}..."
  sleep 1
end

system({"DISPLAY" => record_display}, "ffmpeg", *ffmpeg_flags)

if xephyr_pid
  puts "Killing Xephyr"
  Process.kill("INT", xephyr_pid)
  puts "Waiting for Xephyr to die"
  Process.waitpid(xephyr_pid)
end
ENV["DISPLAY"] = root_display

if show
  system "cvlc", *%W[#{filename.to_s} --play-and-exit]
end
